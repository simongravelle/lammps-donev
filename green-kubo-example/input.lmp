# LAMMPS input file

# Set the generic parameters
boundary p p p                   # Periodic boundary conditions along x, y, and z
units real                       # LAMMPS units system (see docs.lammps.org/units.html) 
atom_style full                  # LAMMPS atom style (see docs.lammps.org/atom_style.html) 

# Define intra-molecular and inter-molecular potentials
bond_style harmonic              # Use harmonic potential for bonds
angle_style harmonic             # Use harmonic potential for angles
pair_style lj/cut/coul/cut 10    # Lennard-Jones interactions + Coulomb with cut-off at 10 Angstroms

# Create the simulation box
lattice fcc 3.0                  # Lattice constant of 3 Angstroms
region box block -10 10 -10 10 -6 6  # Define a region for creating the system
# Define a simulation box with 3 atom types and allocate memory for bonds, angles, etc
create_box 3 box bond/types 1 angle/types 1 extra/bond/per/atom 2 &
  extra/angle/per/atom 2 extra/special/per/atom 2

# Create a single all that extend over the entire box size along x and y
region rp block INF INF INF INF -4.5 4.5 side out
create_atoms 3 region rp
group gp type 3

# Fill the space with water molecules
molecule h2omol water.mol
lattice sc 3.0
create_atoms 0 region box mol h2omol 46545
group gf type 1 2

# Import parameters 
include parameters.inc

# Delete the water molecules that are overlapping
delete_atoms overlap 2.0 gf gp mol yes

# Relax in the anisotropic NPT ensemble
timestep 1.0
fix mynpt all npt temp 300 300 100 aniso 1 1 1000
fix myrct gp recenter NULL NULL INIT

# Generate images and print information every 200 steps
thermo 200
# Uncomment to print images
# dump mydmp all image 200 myimage-*.ppm type type shiny 0.1 box no 0.01 view 90 -90 zoom 1.5
# dump_modify mydmp backcolor white acolor 1 red acolor 2 white acolor 3 &
#   gray adiam 1 2 adiam 2 0.8 adiam 3 2

# Pre-equilibrate
run 10000

# Compute total force that water (gf) exerts on the wall (gp)
# Compute vector: force on group GF due to GP
compute Fwall gf group/group gp

# Define variables for tangential components (x and y)
variable Fx equal c_Fwall[1]
variable Fy equal c_Fwall[2]

# Write to file: time (fs) Fx (kcal/mol/A) Fy (kcal/mol/A)
fix myavt all ave/time 10 1 10 v_Fx v_Fy file forces_wall.dat

# Ideally, the production run time should be larger
run 100000
